{"version":3,"sources":["app.js","filters.js","sh_constants.js","controllers/headerController.js","controllers/mainController.js","dbFactories/campaignFactory.js","dbFactories/characterFactory.js","dbFactories/chronicleFactory.js","dbFactories/mediaFactory.js","dbFactories/rpgChatFactory.js","dbFactories/sessionFactory.js","dbFactories/userFactory.js","directives/chronicle_directive.js","directives/routeLoaderDir.js","services/CampaignService.js","services/CharacterService.js","services/ChatService.js","services/chronicleService.js","services/DbService.js","services/NavigationService.js","services/portraitService.js","services/RpgService.js","services/testService.js","services/UserService.js","controllers/campaign/ApplyCampaignCtrl.js","controllers/campaign/campaignsCtrl.js","controllers/campaign/CampApplicationsCtrl.js","controllers/campaign/editCampaignCtrl.js","controllers/campaign/newCampaignCtrl.js","controllers/campaign/SingleCampaignCtrl.js","controllers/Character/EditCharacterCtrl.js","controllers/Character/SingleCharacterCtrl.js","controllers/chronicle/chronicleController.js","controllers/rpg/singleRpgCtrl.js","controllers/User/EditUserCtrl.js","controllers/User/SingleUserCtrl.js","directives/button_link/goClickDir.js","directives/header_menu/header_menu_ctrl.js","directives/header_menu/header_menu_dir.js","directives/pick_portrait/PickPortraitCtrl.js","directives/pick_portrait/PickPortraitDir.js","directives/rpg_inputs/rpg_input_chat_dir.js","directives/rpg_inputs/rpg_input_chronicle_dir.js","directives/rpg_inputs/rpg_input_dices_dir.js"],"names":[],"mappingsrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnpVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sagohamnen.js","sourcesContent":["var sagohamnenApp = angular.module('ShApp', [\"ngRoute\", \"ngSanitize\", \"ngResource\",  \"ngMaterial\", 'ui.bootstrap', 'luegg.directives', 'ui.select' ]);\r\n\r\nsagohamnenApp.config(function($routeProvider) {\r\n    $routeProvider\r\n    .when(\"/\", {\r\n        templateUrl : \"views/campaigns/all_campaigns.html\",\r\n        controller : \"CampaignsCtrl\",\r\n        resolve: {\r\n            campaignsData: function(CampaignFactory,$route){\r\n                return CampaignFactory.campaigns().$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/home\", {\r\n        templateUrl : \"views/campaigns/all_campaigns.html\",\r\n        controller : \"CampaignsCtrl\",\r\n        resolve: {\r\n            campaignsData: function(CampaignFactory,$route){\r\n                return CampaignFactory.campaigns().$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/edit_user/:userId\", {\r\n        templateUrl : \"views/users/edit_user.html\",\r\n        controller  : \"EditUserCtrl\",\r\n        resolve: {\r\n            setupEditUserData: function(UserFactory,$route){\r\n                return UserFactory.setupEditUser({id : $route.current.params.userId}).$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/user/:userId\", {\r\n        templateUrl : \"views/users/single_user.html\",\r\n        controller  : \"SingleUserCtrl\",\r\n        resolve: {\r\n            userData: function(UserFactory,$route){\r\n                return UserFactory.get({userId : $route.current.params.userId}).$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/campaign/new\", {\r\n        templateUrl : \"views/campaigns/new_campaign.html\",\r\n        controller  : 'newCampaignCtrl',\r\n    })\r\n    .when(\"/campaign/:campaignId\", {\r\n        templateUrl : \"views/campaigns/single_campaign.html\",\r\n        controller  : 'SingleCampaignCtrl',\r\n        resolve: {\r\n            campaignData: function(CampaignFactory,$route){\r\n                return CampaignFactory.get({campaign_id : $route.current.params.campaignId}).$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/edit_campaign/:campaignId\", {\r\n        templateUrl : \"views/campaigns/edit_campaign.html\",\r\n        controller  : 'EditCampaignCtrl',\r\n        resolve: {\r\n            editCampaignData: function(CampaignFactory,$route){\r\n                return CampaignFactory.editCampaign({id : $route.current.params.campaignId}).$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/campaign_apply/:campaignId\", {\r\n        templateUrl : \"views/campaigns/campaign_apply.html\",\r\n        controller  : 'ApplyCampaignCtrl',\r\n        resolve: {\r\n            identifyCampaign: function(CampaignFactory,$route){\r\n                return CampaignFactory.identify({id : $route.current.params.campaignId}).$promise;\r\n            },\r\n            portraitData : function(PortraitService){\r\n                return PortraitService.loadPortraits();\r\n            }\r\n        }\r\n    })\r\n    .when(\"/campaign_applications/:campaignId\", {\r\n        templateUrl : \"views/campaigns/camp_applications.html\",\r\n        controller  : 'CampApplicationCtrl',\r\n        resolve: {\r\n            campaignData: function(CampaignFactory,$route){\r\n                return CampaignFactory.applyingPlayingCharacters({id : $route.current.params.campaignId}).$promise;\r\n            }\r\n        }\r\n    })\r\n    // View chronicles per page.\r\n    .when(\"/campaign/:campaignId/chronicle/:pageNr\", {\r\n        templateUrl : \"views/chronicles/chronicles.html\",\r\n        controller  : 'chronicle/ChronicleController',\r\n        resolve : {\r\n            entriesPerPage : function(ChronicleService, $route) {\r\n                return ChronicleService.entriesPerPage({\r\n                    'campaignId'  : $route.current.params.characterId,\r\n                    'chronicleId' : $route.current.params.pageNr });\r\n            }\r\n        }\r\n    })\r\n    .when(\"/character/:characterId\", {\r\n        templateUrl : \"views/characters/single_character.html\",\r\n        controller  : 'SingleCharacterCtrl',\r\n        resolve: {\r\n            singleCharacter: function(CharacterFactory,$route){\r\n                return CharacterFactory.get({id : $route.current.params.characterId}).$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/edit_character/:id\", {\r\n        templateUrl : \"views/characters/edit_character.html\",\r\n        controller  : 'EditCharacterCtrl',\r\n        resolve : {\r\n            setupData : function(CharacterService, $route ){\r\n                return CharacterService.setupEditCharacter($route.current.params.id).$promise;\r\n            },\r\n            portraitData : function(PortraitService){\r\n                return PortraitService.loadPortraits();\r\n            }\r\n        }\r\n    })\r\n    .when(\"/rpg/:campaignId\", {\r\n        templateUrl : \"views/rpg/single_rpg.html\",\r\n        controller  : 'SingleRpgCtrl',\r\n        resolve: {\r\n            checkUser: function(UserService){\r\n                UserService.checkIfLoggedIn();\r\n            },\r\n            setupData: function(CampaignFactory,$route){\r\n                return CampaignFactory.setupRpg({id : $route.current.params.campaignId}).$promise;\r\n            },\r\n            portraitData : function(PortraitService){\r\n                return PortraitService.loadPortraits().$promise;\r\n            }\r\n        }\r\n    })\r\n    .when(\"/error/401\", {\r\n        templateUrl : \"views/error/401.html\"\r\n    })\r\n    .when(\"/error/403\", {\r\n        templateUrl : \"views/error/403.html\"\r\n    })\r\n    .when(\"/error/404\", {\r\n        templateUrl: \"views/error/404.html\"\r\n    })\r\n    .when(\"/error/500\", {\r\n        templateUrl: \"views/error/500.html\"\r\n    })\r\n    .when(\"/login\", {\r\n        templateUrl : \"views/users/login.html\"\r\n    });\r\n});\r\n\r\nsagohamnenApp.config(['$httpProvider', function ($httpProvider) {\r\n    $httpProvider.interceptors.push(['$q', '$location', '$rootScope', function ($q, $location, $rootScope) {\r\n        return {\r\n            'responseError': function(response) {\r\n                if(response.status === 401) {\r\n                    $location.path('/error/401');\r\n                }\r\n                else if (response.status === 403 ){\r\n                    $location.path('/error/403');\r\n                }\r\n                else if(response.status === 500) {\r\n                    $location.path('/error/500');\r\n                 }\r\n                return $q.reject(response);\r\n            }\r\n        };\r\n    }]);\r\n}]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n","angular.module('ShApp')\r\n.filter('start', function () {\r\n        return function (input, start) {\r\n            if (!input || !input.length) { return; }\r\n\r\n            start = +start;\r\n            return input.slice(start);\r\n        };\r\n    })\r\n\r\n.filter(\"show_linebreaks\", function($filter) {\r\n return function(data) {\r\n   if (!data || data == null || typeof data !== 'string' ) return data;\r\n   return data.replace(/\\n\\r?/g, '<br />');\r\n };\r\n});\r\n\r\nangular.module('ShApp').filter('reverse', function() {\r\n  return function(items) {\r\n    return items.slice().reverse();\r\n  };\r\n});","sagohamnenApp.constant('config', {\r\n    charStatusArchived              :0,\r\n    charStatusApplying              :1,\r\n    charStatusPlaying               :2,\r\n    charStatusNpc                   :3,\r\n    charStatusDeleted               :4,\r\n    charStatusBlocked               :5,\r\n    campaginArchived                :0,\r\n    campaginActive                  :1,\r\n\r\n    rpgChatStyleMessage\t\t\t\t:0,\r\n    rpgChatStyleDie\t\t\t\t\t:1,\r\n\r\n    maxChroniclesInRow              :10,\r\n\r\n    // How many chats the user can do\r\n    // before he/she is considered spamming.\r\n    chatSpamNr                     :30,\r\n    // The max length of a chat entry.\r\n    chatMaxLength                   :500,\r\n\r\n    dicesMaxNr                      :100,\r\n    dicesTypes                      :[4,6,8,10,12,20,100],\r\n    dicesModMax                     :1000,\r\n    dicesModMin                     :-1000,\r\n    dicesDescriptionMaxLength       :250,\r\n});","","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('MainController', function($scope, UserService, PortraitService, $rootScope, SessionFactory, $location) {\r\n\r\n\t$scope.$on('$viewContentLoaded', function() {\r\n\t\t// Get current page.\r\n\t\t// Send this to userservice.\r\n\t\tvar page = $location.url().substring(1);\r\n\r\n    \tUserService.checkIfLoggedIn(page);\r\n\t});\r\n\r\n    function login(){\r\n        UserService.checkIfLoggedIn();\r\n    };\r\n\r\n});\r\n\r\n\r\n","angular.module('ShApp')\r\n\r\n.factory('CampaignFactory', ['$resource',\r\n    function($resource) {\r\n        //return $resource('/api/campagin/:campaign_id');\r\n        // var url =  var url = './api/campaign';;\r\n        return $resource('/api/campaign/:campaign_id', {}, {\r\n        \tcampaigns : { method : \"GET\", url : \"/api/campaign\" },\r\n            identify : { method : \"GET\", url: \"/api/identify_campaign/:id\" },\r\n            applyingPlayingCharacters : { method : \"GET\", url: \"/api/camp_applications_setup/:id\"},\r\n            editCampaign : { method : \"GET\", url : \"/api/campaign/:id/edit\" },\r\n            update : { method : \"PUT\", url : \"/api/campaign/:id\" },\r\n            activate : {method : \"GET\", url : \"/api/activate_campaign/:id \"},\r\n            setupRpg : {method : \"GET\", url : \"/api/setup_rpg/:id \"}\r\n        });\r\n    }\r\n]);\r\n","angular.module('ShApp')\r\n\r\n.factory('CharacterFactory', ['$resource',\r\n    function($resource) {\r\n        //return $resource('/api/campagin/:campaign_id');\r\n        return $resource('/api/character/:id', {}, {\r\n        \tchangeStatus : {method: \"GET\", url: \"/api/character/:id/status/:status\"},\r\n        \tupdate : {method: \"PUT\", url: \"/api/character/:id\" }\r\n        });\r\n    }\r\n\r\n    //, params:{id:'@id', status:'@status'}\r\n]);","angular.module('ShApp')\r\n\r\n.factory('ChronicleFactory', ['$resource',\r\n    function($resource) {\r\n        //return $resource('/api/campagin/:campaign_id');\r\n        return $resource('/api/chronicle/:id', {}, {\r\n        \t/*save: { method: 'POST' , isArray: false},*/\r\n        });\r\n    }\r\n\r\n    //, params:{id:'@id', status:'@status'}\r\n]);","angular.module('ShApp')\r\n\r\n.factory('MediaFactory', ['$resource',\r\n    function($resource) {\r\n        return $resource('/api/portraits/:id', {}, {\r\n            fetch_portraits : { method : \"GET\", url : \"/api/fetch_portraits\" }\r\n        });\r\n    }\r\n]);","angular.module('ShApp')\r\n\r\n.factory('RpgChatFactory', ['$resource',\r\n    function($resource) {\r\n        return $resource('/api/rpg_chat/:campaignId', {}, {\r\n        \tnewestChats : { method : \"GET\", url : \"/api/rpg_update/:campaignId/newest/:chatId/:chronicleId\" },\r\n        \tstoreDices : { method: \"POST\", url : \"/api/rpg/role_dice\"}\r\n        });\r\n    }\r\n]);","angular.module('ShApp')\r\n\r\n.factory('SessionFactory', [ function() {\r\n\r\n\tvar factory = {};\r\n\r\n\tfactory.setKey = function(key, value){\r\n\t\tsessionStorage.setItem(key, value);\r\n\t}\r\n\tfactory.getKey = function(key){\r\n\t\treturn sessionStorage.getItem(key);\r\n\t}\r\n\tfactory.deleteKey = function(key){\r\n\t\tsessionStorage.removeItem(key);\r\n\t}\r\n\r\n\treturn factory;\r\n}\r\n]);","angular.module('ShApp')\r\n\r\n.factory('UserFactory', ['$resource',\r\n    function($resource) {\r\n        //return $resource('/api/campagin/:campaign_id');\r\n        return $resource('/api/user/:userId', {}, {\r\n        \tsetupEditUser : {method: \"GET\", url: \"/api/user/:id/edit\"},\r\n        \tupdateA : {method: \"PUT\", url: \"/api/user/:id\"},\r\n        \tloadUser : {method : \"GET\", url: '/api/username_and_id' },\r\n        \tlogIn : {method : \"GET\", url: '/api/username_and_id' },\r\n        \tlogOut : {method : \"GET\", url: '/logout' }\r\n        });\r\n    }\r\n]);","angular.module('ShApp')\r\n\r\n.directive('chronicleEntry', function() {\r\n    var result = {};\r\n    result.restrict =  'E';\r\n    result.templateUrl = \"views/chronicles/chronicle_directive.html\";\r\n\r\n    return result;\r\n});","// This directive will communicate with the index.php\r\n// and show a loader icon when Angular Route are waiting\r\n// for a resolver to finish. This way the user wont be\r\n// confused if nothing happens while page is loading.\r\n\r\nangular.module('ShApp')\r\n.directive('routeLoadingIndicator', function($rootScope, $route, $timeout) {\r\n  return {\r\n    restrict: 'E',\r\n    replace: true,\r\n    template: \"<div class='col-lg-12' ng-if='isRouteLoading'><h1>Loading <i class='fa fa-spinner' aria-hidden='true'></i></h1></div>\",\r\n    link: function(scope, element) {\r\n\r\n      $rootScope.$on('$routeChangeStart', function(event, currentRoute, previousRoute) {\r\n        scope.isRouteLoading = true;\r\n      });\r\n\r\n      $rootScope.$on('$routeChangeSuccess', function() {\r\n        scope.isRouteLoading = false;\r\n      });\r\n    }\r\n  };\r\n});\r\n\r\n","angular.module('ShApp')\r\n\r\n.factory('CampaignService', function($http, $sce, DbService, config) {\r\n\tvar factory = {};\r\n\r\n\tfactory.campaign = function(data, myId)\r\n\t{\r\n        var status_applying = config.charStatusApplying;\r\n        var status_playing = config.charStatusPlaying;\r\n\r\n        data.created_at = new Date( data.created_at );\r\n        data.updated_at = new Date( data.updated_at );\r\n        //data.description = $sce.trustAsHtml(data.description);\r\n\r\n        var player_characters = data.player_characters;\r\n        data.players = [];\r\n        data.appliers = [];\r\n        $.each( player_characters, function( index, value ){\r\n            if(value.status == status_applying) data.appliers.push(value);\r\n            if(value.status == status_playing) data.players.push(value);\r\n        });\r\n        return data;\r\n\t}\r\n\r\n    factory.identifyCampaign = function(campaignId) {\r\n        return DbService.identifyCampaign(campaignId).then(function successCallback(response) {\r\n            return response.data;\r\n        }, function errorCallback(response) {\r\n            $location.path(\"error/500\");\r\n        });\r\n    }\r\n\r\n    factory.validateImgUrl = function(imgUrl) {\r\n        var imgUrl = formdata.image_url;\r\n        var flickDomain = \"staticflickr.com\";\r\n        return imgUrl.indexOf(flickDomain) < 0 ? false : true;\r\n    }\r\n\r\n    factory.saveApplication = function(campaignId, formdata) {\r\n        // If image url dose not contain staticflickr.com\r\n        // then dont accept the image.\r\n\r\n        console.log(formdata);\r\n\r\n        var imgUrl = formdata.image_url;\r\n        var flickDomain = \"staticflickr.com\";\r\n\r\n        if (imgUrl.indexOf(flickDomain) < 0) {\r\n            console.log(\"Ej godkänd.\");\r\n        } else {\r\n            console.log(\"godkänd\");\r\n        }\r\n\r\n        return;\r\n        return DbService.saveApplication(campaignId).then(function successCallback(response) {\r\n            return response.data;\r\n        }, function errorCallback(response) {\r\n            $location.path(\"error/500\");\r\n        });\r\n    }\r\n\r\n\treturn factory;\r\n\r\n});","angular.module('ShApp')\r\n\r\n.factory('CharacterService', function($resource) {\r\n\tvar vm = {};\r\n\r\n\tvar Character = $resource('/api/character/:characterId',{},{\r\n\t\tsetupEdit : { method : \"GET\", url : \"/api/character/:characterId/edit\" },\r\n\t\tchangeStatus : {method: \"GET\", url: \"/api/character/:id/status/:status\"},\r\n    \tupdate : {method: \"PUT\", url: \"/api/character/:id\" }\r\n\t});\r\n\r\n\tvm.getInfo = function(characterId) {\r\n\r\n\t}\r\n\r\n\tvm.update = function(id, postData){\r\n\t\treturn Character.update({id: id}, postData).$promise;\r\n\t}\r\n\r\n\tvm.changeStatus = function(characterID, newStatus){\r\n\t\treturn Character.changeStatus({id: characterID, status: newStatus}).$promise;\r\n\t}\r\n\r\n\tvm.setupEditCharacter = function(id) {\r\n\t\treturn Character.setupEdit({'characterId' : id});\r\n\t}\r\n\r\n\treturn vm;\r\n});","angular.module('ShApp')\r\n\r\n.factory('ChatService', function($resource, config) {\r\n\r\n\tvar vm = {};\r\n\r\n\tvar Chat = $resource('/api/rpg_chat/:campaignId',{},{\r\n\t\tnewestChats : { method : \"GET\", url : \"/api/rpg_update/:campaignId/newest/:chatId/:chronicleId\" },\r\n    \tstoreDices : { method: \"POST\", url : \"/api/rpg/role_dice\"}\r\n\t});\r\n\r\n\tvm.diceThrowValid = function(nr, type, mod, ob, description){\r\n\t\tif (nr < 1)\r\n\t\t\treturn \"Antalet tärningar är för litet.\";\r\n\t\tif (nr > config.dices_max_nr)\r\n\t\t\treturn \"Antalet tärningar får max vara 100 stycken.\";\r\n    \tif ( config.dicesTypes.indexOf(type) == -1 )\r\n    \t\treturn \"Tärningtypen ej tillåten.\";\r\n    \tif (mod < config.dicesModMin || mod > config.dicesModMax )\r\n    \t\treturn \"Tärningsmodifikationen är för hög eller låg.\";\r\n    \tif (ob < 0 || ob > 1 ) // This should be a boolean\r\n    \t\treturn \"Alternativet OB har fel format.\";\r\n\r\n    \tif (!!description && description.length > config.dicesDescriptionMaxLength)\r\n    \t\treturn \"Beskrivningen innehåller för många tecken.\";\r\n\r\n    \treturn \"\";\r\n\t}\r\n\r\n\tvm.storeDiceThrow = function(campaignId, nr, type, mod, ob, description){\r\n\t\tvar chatDice = {};\r\n\t\tchatDice.campaign_id \t= campaignId;\r\n    \tchatDice.dice_nr \t\t= nr;\r\n    \tchatDice.dice_type \t\t= type;\r\n    \tchatDice.dice_ob \t\t= ob;\r\n    \tchatDice.dice_mod \t\t= mod;\r\n    \tchatDice.dice_description = description;\r\n\r\n    \treturn Chat.storeDices({}, chatDice).$promise;\r\n\t}\r\n\r\n\tvm.chatValid = function(message ){\r\n\t\tvar error = \"\";\r\n\t\tif (message.length > config.chatMaxLength) return \"Chatinlägget är för långt.\";\r\n\t\tif (message.length < 1) return \"Inlägget är tomt\";\r\n\t\treturn error;\r\n\t}\r\n\r\n\tvm.storeChat = function(message, campaignId, userId) {\r\n\t\tvar chat = new Chat({id: campaignId });\r\n\t\tchat.user_id\t\t= userId;\r\n\t\tchat.text \t\t\t= message;\r\n\t\tchat.campaign_id \t= campaignId;\r\n\t\tchat.type\t\t \t= config.rpgChatStyleMessage;\r\n\t\treturn chat.$save();\r\n\t}\r\n\r\n\treturn vm;\r\n\r\n});","angular.module('ShApp')\r\n\r\n.factory('ChronicleService', function($resource, entriesPerPage) {\r\n\r\n\tvar vm = {};\r\n\r\n    var Chronicle = $resource('/api/chronicle/:campaignId',{},{\r\n        // campaign/{campaign_id}/page/{page_nr}\r\n        entriesPerPage : { method : \"GET\", url : \"/api/campaign/:campaignId/page/:chronicleId\" },\r\n    });\r\n\r\n    vm.entriesPerPage = function(campaignID, pageNr){\r\n        Chronicle.entriesPerPage({ 'campaignId' : campaignID, 'chronicleId' : pageNr}).$promise;\r\n    }\r\n\r\n    vm.storeEntry = function(campaignId, text, characterId){\r\n        var chronicle = new Chronicle({id: campaignId});\r\n        chronicle.text          = text;\r\n        chronicle.campaign_id   = campaignId;\r\n        chronicle.character_id  = characterId;\r\n\r\n        var result = chronicle.$save();\r\n        return result;\r\n    }\r\n\r\n\treturn vm;\r\n\r\n});","angular.module('ShApp')\r\n\r\n.factory('DbService', function($http) {\r\n\r\n    return {\r\n        // get all the comments\r\n        getCampaigns : function() {\r\n            var url = './api/campaign';\r\n            return $http.get(url);\r\n        },\r\n\r\n        getCampaign : function(id){\r\n            var url = './api/campaign/' + id;\r\n            return $http.get(url);\r\n        },\r\n\r\n        identifyCampaign : function(campaignId) {\r\n            var url = './api/identify_campaign/' + campaignId;\r\n            return $http.get(url);\r\n        },\r\n\r\n        updateCampaign : function(changedData){\r\n            var url = './api/campaign/' + changedData.id ;\r\n            //var url = './api/campaigns/' + id + '/edit';\r\n            //return $http.post(url, $.param(changedData));\r\n            return $http.put(url, changedData);\r\n        },\r\n\r\n        applyToCampaign : function(campaignId, userId){\r\n            var url = \"./api/apply_to_campaign/\" + campaignId ;\r\n            return $http.get(url);\r\n        },\r\n\r\n        saveApplication : function(campaignId){\r\n            var url = \"./api/save_application/\" + campaignId ;\r\n            return $http.get(url);\r\n        },\r\n\r\n        getUser : function(id) {\r\n            var url = './api/user/' + id;\r\n            return $http.get(url);\r\n        },\r\n\r\n        updateUser : function(changedData){\r\n            var url = \"./api/user/\" + changedData.id;\r\n            return $http.put(url, changedData);\r\n        },\r\n\r\n        chroniclesPerPage : function(campaign_id, pageNr){\r\n            var url = \"./api/campaign/\" + campaign_id + \"/page/\" + pageNr;\r\n            return $http.get(url);\r\n        },\r\n\r\n        searchPortrait : function(tag, pageNr){\r\n            var url = \"./api/portraits\";\r\n            return $http.post(url, {'tag' : tag, 'page_nr' : pageNr });\r\n        }\r\n\r\n    }\r\n\r\n});","angular.module('ShApp')\r\n\r\n.factory('NavigationService', function($http, $sce, $rootScope) {\r\n\r\n    //$rootScope.navigation.url = {'title' : '', 'active': false, 'url':'#' };\r\n\tvar vm = {};\r\n    $rootScope.navigation = [];\r\n\r\n    vm.set = function(navArray){\r\n        /*$rootScope.navigation.url = url;\r\n        $rootScope.navigation.title = title;\r\n        $rootScope.navigation.active = active;*/\r\n        //$rootScope.navigation.push({'title' : title, 'active': false, 'url':'#' });\r\n        $rootScope.navigation = navArray;\r\n        //$rootScope.$apply();\r\n    }\r\n\r\n    vm.addToMenu = function(theUrl, theTitle, ifActive)\r\n    {\r\n        var menuObj = {\r\n            'url' : theUrl,\r\n            'title' : theTitle,\r\n            'active' : ifActive\r\n        }\r\n        $rootScope.navigation.push(menuObj);\r\n    }\r\n\r\n\r\n\treturn vm;\r\n\r\n});\r\n","angular.module('ShApp')\r\n\r\n.factory('PortraitService', function(config, MediaFactory, $q) {\r\n\tvar factory = {};\r\n\tfactory.all_portraits = [];\r\n\r\n\tfactory.loadPortraits = function(){\r\n\t\tvar deferred = $q.defer();\r\n\r\n\t\tif (factory.all_portraits.length > 0){\r\n\t\t\tconsole.log(\"Porträtt finns redan.\");\r\n\t\t\tdeferred.resolve();\r\n\t\t\treturn deferred;\r\n\t\t}\r\n\r\n\t\tvar result = MediaFactory.fetch_portraits().$promise\r\n\t\tresult.then(function(response){\r\n\t\t\tfactory.all_portraits = response.portraits;\r\n\t\t}, function(error) {\r\n\t\t\tconsole.log(\"Error\");\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfactory.fetchPortraits = function(){\r\n\t\treturn MediaFactory.fetch_portraits().$promise;\r\n\t}\r\n\r\n\tfactory.setPortraits = function(data){\r\n\t\tfactory.all_portraits = data;\r\n\t}\r\n\r\n\treturn factory;\r\n\r\n});","angular.module('ShApp')\r\n\r\n.factory('RpgService', function(UserService, config, $rootScope, $resource, PortraitService) {\r\n\r\n\tvar factory = {};\r\n\r\n\tvar RpgChat = $resource('/api/rpg_chat/:campaignId',{},{\r\n\t\tnewestChats : { method : \"GET\", url : \"/api/rpg_update/:campaignId/newest/:chatId/:chronicleId\"}\r\n\t});\r\n\r\n\tfactory.onlineUsersId = [];\r\n\tfactory.onlineUsers = [];\r\n\tfactory.users = {\r\n        online : [],\r\n        onlineIDs : [],\r\n        all : [],\r\n    }\r\n\tfactory.characters = [];\r\n\tfactory.portraits = [];\r\n\tfactory.info = {\r\n\t\treadyForLoop\t: false,\r\n\t\tupdateCounter \t: 0,\r\n\t\tupdateDelay\t\t: 3000,\r\n\t\tlastReadChatId\t: 0,\r\n\t\tlastReadChronicleId\t: 0,\r\n\t\tcampaignId \t\t: 0,\r\n\t\tgmId\t\t\t: 0,\r\n\t\tchronicleError\t: \"\"\r\n\t}\r\n\tfactory.messages = {\r\n\t\tspamingChronicle  : \"Var god och vänta med att skriva inlägg tills dess en annan spelare gjort ett.\"\r\n\t}\r\n\tvar timerId = 0;\r\n\r\n\tfactory.init = function(setupData){\r\n\t\t// Restart counter when page load.\r\n\t\tfactory.info.updateCounter = 0;\r\n\t\tfactory.info.updateDelay = 3000;\r\n\t\tfactory.info.lastReadChatId = 0;\r\n\t\tfactory.info.lastReadChronicleId = 0;\r\n\r\n\t\t// Store important info.\r\n\t\tfactory.info.campaignId = setupData.campaign.id;\r\n\t\tfactory.info.gmId\t\t= setupData.campaign.user_id;\r\n\t\tfactory.characters \t\t= setupData.characters;\r\n\r\n\r\n\r\n\t\t// Save data about all users who play or are GM,\r\n\t\t// and store in the service.\r\n\t\tfactory.users.all = setupData.users;\r\n\r\n\t\t// Fetch the portraits for characters.\r\n\t\tgiveCharactersPortraits(factory.characters);\r\n\r\n\r\n\t\t// Run the shit!\r\n\t\tchatLoop();\r\n\r\n\t}\r\n\r\n\tfactory.my_characters = function(){\r\n\t\tvar myCharacters = [];\r\n\r\n\t\t// If rpg have no characters.\r\n\t\tif (factory.characters.length == 1 ) return myCharacters;\r\n\r\n\t\t// If user is gm, add an extra option for \"no\" character.\r\n\t\tif (meGm() ){\r\n\t\t\tmyCharacters.push( {id:\"0\", name:\"Berättarröst\", portrait_id:0});\r\n\t\t}\r\n\r\n\t\t// Collect those characters that are the user´s.\r\n\t\tfactory.characters.forEach(function(character){\r\n\t\t\tif (character.id == UserService.currentUser.id) {\r\n\t\t\t\tmyCharacters.push(character);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn myCharacters;\r\n\t}\r\n\r\n\tfactory.stopPulling = function(){\r\n\t\tclearInterval(timerId);\r\n\t}\r\n\r\n\tfactory.interpret_stored_chat_response = function(response) {\r\n\t\tvar chatEntry = {};\r\n\t\tif (!!response.id && !!response.text && !!response.created_at && !!response.user_id ) {\r\n            chatEntry.id           = response.id;\r\n            chatEntry.text         = response.text;\r\n            chatEntry.date         = response.created_at;\r\n            chatEntry.user_id      = response.user_id;\r\n            // Format result.\r\n            chatEntry = format_chat_from_db(chatEntry);\r\n            return chatEntry;\r\n        } else return null;\r\n\t}\r\n\r\n\tfactory.format_chronicle = function( campaignId, text, characterId, info ){\r\n\t\tvar entry = {\r\n            'id' : info.id,\r\n            'text' : text,\r\n            'campaign_id' : campaignId,\r\n            'character_id' : characterId,\r\n            'user_id'       : info.user_id,\r\n        }\r\n\r\n        // Add Character info if there is some.\r\n        if (entry.character_id > 0){\r\n        \tentry.character =  { status : info.chararacter_status, 'portrait_id' : info.character_portrait_id};\r\n        }\r\n\r\n\t\treturn format_chronicle_from_db(entry);\r\n\t}\r\n\r\n\tfactory.doEntryExist = function(oldEntries, newEntry)\r\n\t{\r\n\t\tvar exists = false;\r\n\t\toldEntries.forEach(function(row){\r\n\t\t\tif (row.id == newEntry.id) {\r\n\t\t\t\texists = true;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn exists;\r\n\t}\r\n\r\n\t// ===================================\r\n\t// PRIVATE FUNCTIONS\r\n\t// ===================================\r\n\r\n\tvar chatLoop = function () {\r\n\r\n\t\t// Kill possible old timer.\r\n\t\tclearTimeout(timerId);\r\n\r\n\t    function updateLoop() {\r\n\t        factory.info.updateCounter += 1;\r\n\t        if (factory.info.updateCounter == 5)\r\n\t        \tfactory.info.updateDelay = 5000;\r\n\t        if (factory.info.updateCounter == 10)\r\n\t        \tfactory.info.updateDelay = 10000;\r\n\t        if (factory.info.updateCounter == 50)\r\n\t        \tfactory.info.updateDelay = 60000;\r\n\r\n\t        getNewest();\r\n\r\n\t        // Make this function loop.\r\n\t        timerId = setTimeout(updateLoop, factory.info.updateDelay)\r\n\t    }\r\n\t    updateLoop();\r\n\t}\r\n\r\n\tfunction getNewest() {\r\n\t\tvar lastReadChatId = factory.info.lastReadChatId;\r\n\t\tvar lastRecievedChronicleId = factory.info.lastReadChronicleId;\r\n\t\tvar campaignId = factory.info.campaignId;\r\n\r\n\t\t// Fetch updates.\r\n\t\tRpgChat.newestChats({\r\n\t\t\t'campaignId'\t: campaignId,\r\n\t\t\t'chatId' \t\t: lastReadChatId,\r\n\t\t\t'chronicleId'\t: lastRecievedChronicleId }).$promise.then(function(response){\r\n\t\t\tcallback_Updates(response);\r\n\t\t}, function(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\t}\r\n\r\n\tvar callback_Updates = function(response){\r\n\t\tvar newChronicles = [];\r\n\t\tvar newChats = [];\r\n\t\tvar newDices = [];\r\n\r\n\t\t// Last chat and chronicle id:s\r\n\t\tvar latestChatId = response.newest_chats.last_chat_id;\r\n\t\tvar latestChronicleId = response.newest_chronicles.last_chronicle_id;\r\n\t\tvar currentOnlineUsers = [];\r\n\r\n\t\t// Active users\r\n\t\tvar currentOnlineUsersId = response.active_users;\r\n\t\t// See if new users have come online, or someone left.\r\n\t\tvar onlineUsersChanged = simpleArraysEqual(factory.onlineUsersId, currentOnlineUsersId) == true ? false : true;\r\n\r\n\t\t// Update online users\r\n\t\tif( onlineUsersChanged ){\r\n\t\t\t// Iterate and add name and avatar to list.\r\n\t\t\tcurrentOnlineUsersId.forEach(function(userId){\r\n\t\t\t\tvar data = findUser(userId);\r\n\t\t\t\tcurrentOnlineUsers.push({'id' : userId, 'name': data.name, 'avatar' : data.avatar});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// If new chronicles\r\n\t\tif (latestChronicleId > factory.info.lastReadChronicleId) {\r\n\t\t\t// Remember if new chronicles arrived.\r\n\t\t\tfactory.info.lastReadChronicleId = latestChronicleId;\r\n\r\n\t\t\tnewChronicles = response.newest_chronicles.chronicles;\r\n\t\t\tnewChronicles.forEach(function(row){\r\n\t\t\t\trow = format_chronicle_from_db(row);\r\n\t\t\t});\r\n\r\n\t\t\tnewChronicles.reverse();\r\n\t\t}\r\n\r\n\t\t// If new chats.\r\n\t\tif (latestChatId > factory.info.lastReadChatId ) {\r\n\t\t\tfactory.info.lastReadChatId = latestChatId;\r\n\t\t\tfactory.info.updateCounter = 0;\r\n\r\n\t\t\tnewChats = response.newest_chats.chats;\r\n\t\t\tnewChats.forEach(function(row){\r\n\t\t\t\trow = format_chat_from_db(row);\r\n\t            // Fetch dices.\r\n\t            if (row.type == config.rpgChatStyleDie)\r\n\t            \tnewDices.push(row);\r\n\t        });\r\n\r\n\t        newChats.reverse();\r\n\t\t}\r\n\r\n\t\t// Transmit result to the controller.\r\n\t\t$rootScope.$broadcast('rpgUpdate', {\r\n\t\t\t'newChats'\t\t\t: newChats,\r\n\t\t\t'newDices' \t\t\t: newDices,\r\n\t\t\t'newChronicles' \t: newChronicles,\r\n\t\t\t'activeUsers' \t\t: currentOnlineUsers,\r\n\t\t\t'onlineUsersChanged' : onlineUsersChanged });\r\n\t}\r\n\r\n\tfunction format_chat_from_db(chat){\r\n\t\tchat.date = new Date(chat.date);\r\n        // Add username, wich was fetched with setupData.\r\n        chat.name = findUser(chat.user_id).name;\r\n        return chat;\r\n\t}\r\n\r\n\tfunction format_chronicle_from_db(chronicle)\r\n\t{\r\n\t\t// If GM add style class.\r\n\t\tif (chronicle.user_id == factory.info.gmId)\r\n\t\t\tchronicle.styleClass = \"entry-chronicle-gm\";\r\n\r\n\t\t// Attach portrait url:s\r\n\t\tif (!!chronicle.character){\r\n\t\t\t// Add status classes.\r\n\t\t\tif (chronicle.character.status == config.charStatusPlaying )\r\n\t\t\t\tchronicle.styleClass = \"entry-chronicle-player\";\r\n\t\t\telse if (chronicle.character.status == config.charStatusNpc )\r\n\t\t\t\tchronicle.styleClass = \"entry-chronicle-npc\";\r\n\t\t\telse chronicle.styleClass = \"\";\r\n\r\n\t\t\tchronicle.character.portrait = findPortrait(chronicle.character.portrait_id);\r\n\t\t}\r\n\r\n\t\t// Find user\r\n\t\tchronicle.name = findUser(chronicle.user_id).name;\r\n\r\n\t\treturn chronicle;\r\n\t}\r\n\r\n\r\n\tvar TrimNrChats = function() {\r\n        var totalNr = factory.chats.length;\r\n        var maxNrChats = 40;\r\n        if ( totalNr > maxNrChats) {\r\n            var nrToRemove = totalNr - maxNrChats;\r\n            factory.chats.splice(0,nrToRemove);\r\n        }\r\n    }\r\n\r\n    var findUser = function(userId)\r\n    {\r\n    \tvar data = {'name' : '', 'avatar' : ''};\r\n    \tfactory.users.all.forEach(function(user){\r\n    \t\tif (user.id == userId) {\r\n    \t\t\tdata.name = user.name;\r\n    \t\t\tdata.avatar = user.avatar;\r\n    \t\t}\r\n    \t});\r\n    \treturn data;\r\n    }\r\n\r\n    // Compare two arrays to see if they\r\n    // have the same content.\r\n    var simpleArraysEqual = function (array1, array2)\r\n    {\r\n    \tvar ok = true;\r\n    \tvar i = 0;\r\n\r\n    \tif (array1.length != array2.length) return false;\r\n\r\n    \t// Sort it\r\n    \tarray1.sort();\r\n    \tarray2.sort();\r\n\r\n    \tarray1.forEach(function(){\r\n    \t\t//debugger;\r\n    \t\tif (array1[i] != array2[i]) ok = false;\r\n    \t\ti++;\r\n    \t});\r\n\r\n    \treturn ok;\r\n    }\r\n\r\n    var findPortrait = function(portraitID, thumbnail = true)\r\n    {\r\n    \tvar thePorrait;\r\n\r\n    \tif (!! PortraitService.all_portraits){\r\n    \t\tPortraitService.all_portraits.forEach(function(portrait){\r\n    \t\tif (portrait.id == portraitID)\r\n\t    \t\tthePorrait = portrait;\r\n\t    \t});\r\n\t    \treturn thumbnail ? thePorrait.thumbnail : thePorrait.medium;\r\n    \t} else {\r\n    \t\tconsole.log(\"Porträtten kunde inte hittas.\");\r\n    \t\treturn null;\r\n    \t}\r\n    }\r\n\r\n    var giveCharactersPortraits = function(characters)\r\n    {\r\n    \tcharacters.forEach(function(character){\r\n\t\t\tcharacter.portrait = {\r\n\t\t\t\t'thumbnail': findPortrait(character.portrait_id),\r\n\t\t\t\t'medium' : findPortrait(character.portrait_id, false)};\r\n    \t});\r\n    }\r\n\r\n    var meGm = function(){\r\n    \treturn factory.info.gmId == UserService.currentUser.id;\r\n    }\r\n\r\n\treturn factory;\r\n\r\n});\r\n","angular.module('ShApp')\r\n\r\n.factory('TestService', function($q) {\r\n\tvar factory = {};\r\n\r\n\tfactory.tungUppgift = function() {\r\n\t\tvar p = $q.defer();\r\n\t\tsetTimeout(function(){\r\n\t\t\tp.resolve(\"Här är svaret!\");\r\n\t\t}, 5000);\r\n\t\treturn p.promise;\r\n\t}\r\n\r\n\tfactory.tungUppgift2 = function(){\r\n\t\tvar p = $q.defer();\r\n\t\tsetTimeout(function(){\r\n\t\t\tp.resolve(\"Uppg2 svar!\");\r\n\t\t\tconsole.log(\"Upp2 klar.\");\r\n\t\t}, 3000);\r\n\t\treturn p.promise;\r\n\t}\r\n\r\n\tfactory.tungUppgift3 = function(){\r\n\t\tvar p = $q.defer();\r\n\t\tsetTimeout(function(){\r\n\t\t\tp.resolve(\"Uppg3 svar!\");\r\n\t\t\tconsole.log(\"Upp3 klar.\");\r\n\t\t}, 2000);\r\n\t\treturn p.promise;\r\n\t}\r\n\r\n\t/*TestService.tungUppgift().then(function(svar){\r\n            console.log(\"NU är det klart!\", svar);\r\n        })\r\n            .then(TestService.tungUppgift2)\r\n            .then(TestService.tungUppgift3)\r\n            .then(function(){console.log(\"allt klart!\");});*/\r\n\r\n\treturn factory;\r\n});","angular.module('ShApp')\r\n\r\n.factory('UserService', function($rootScope, $resource, $location, SessionFactory) {\r\n\tconsole.log(\"UserService läses in.\");\r\n\tvar vm = {};\r\n\tvm.csrf = \"\";\r\n\tvm.currentUser = {name : \"\", id: 0, loggedIn : false };\r\n\r\n\tvar User = $resource('/api/user/:id',{},{\r\n\t\tsetupEditUser : {method: \"GET\", url: \"/api/user/:id/edit\"},\r\n    \tupdateA : {method: \"PUT\", url: \"/api/user/:id\"},\r\n    \tloadUser : {method : \"GET\", url: '/api/username_and_id' },\r\n    \tlogIn : {method : \"GET\", url: '/api/username_and_id' },\r\n    \tlogOut : {method : \"GET\", url: '/logout' }\r\n\t});\r\n\r\n\tvm.checkIfLoggedIn = function(currentPage) {\r\n\t\tconsole.log(\"INne i checkIfLoggedIn\");\r\n\t\t// User logged in?\r\n\t\tif (! vm.currentUser.loggedIn) {\r\n\t\t\tconsole.log(\"Userserives säger att jag inte är inloggad.\");\r\n\t\t\t// If not check Localstorage.\r\n\t\t\tif ( !!SessionFactory.getKey('userId') ) {\r\n\t\t\t\tconsole.log(\"currentUser not logged in but getting from local session.\");\r\n\t\t\t\t// Here I am using local session, because\r\n\t\t\t\t// if user refresh a page, all service data\r\n\t\t\t\t// will be lost. But local session will remain\r\n\t\t\t\t// until user close tab/browser.\r\n\t\t\t\tvm.currentUser.id = SessionFactory.getKey('userId');\r\n\t\t\t\tvm.currentUser.name = SessionFactory.getKey('userName');\r\n\t\t\t\tvm.currentUser.loggedIn = true;\r\n\t\t\t\tconsole.log(vm.currentUser);\r\n\t\t\t// If recently logged in the user will\r\n\t\t\t// be directed to index, which means\r\n\t\t\t// current page will be empty.\r\n\t\t\t} else if (currentPage == '') {\r\n\t\t\t\tconsole.log(\"Now ask server\");\r\n\t\t\t\t// Only ask the server for authentication\r\n\t\t\t\t// when user asks to log in.\r\n\t\t\t\task_server_if_user_logged_in();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconsole.log(\"My id \"+ vm.currentUser.id);\r\n\t\t}\r\n\r\n\t\t// Always update the user menu for each page load.\r\n\t\tupdateUserMenu();\r\n\t}\r\n\r\n\tvm.setUser = function(user){\r\n\t\tvm.currentUser = user;\r\n\t}\r\n\r\n\tvm.logout = function() {\r\n\t\tconsole.log(\"Loggar ut\");\r\n\t\tUser.logOut({}, function(response){\r\n\t\t\tconsole.log(\"User have been logged out on server.\");\r\n\t\t\tvm.setLogout();\r\n\t\t\tupdateUserMenu();\r\n\t\t\t$location.path(\"/home\");\r\n\t\t});\r\n\t};\r\n\r\n\t// Call this when user get a 403.\r\n\tvm.setLogout = function() {\r\n\t\tvm.currentUser.id = 0;\r\n        vm.currentUser.name = \"\";\r\n        vm.currentUser.loggedIn = false;\r\n\t\tif ( !!SessionFactory.getKey('userId') && !!SessionFactory.getKey('userName')) {\r\n\t\t\tSessionFactory.deleteKey('userId');\r\n            SessionFactory.deleteKey('userName');\r\n\t\t}\r\n\t}\r\n\r\n\t/* ========================================\r\n\t\t\tPrivate methods\r\n\t   ======================================= */\r\n\r\n\tfunction ask_server_if_user_logged_in(){\r\n\t\tconsole.log(\"Asking server.\");\r\n\t\tUser.loadUser().$promise.then(function(response){\r\n\t\t\tconsole.log(\"Serverser responded\", response);\r\n\t\t\t// Check if missing JSON columns.\r\n\t\t\tif (!response.hasOwnProperty('name') || !response.hasOwnProperty('id')\r\n\t\t\t\t|| !response.hasOwnProperty('signed_in')) {\r\n\t\t\t\t$location.path(\"/500\");\r\n\t\t\t}\r\n\r\n            // Signed in?\r\n            if (response.signed_in){\r\n            \tconsole.log(\"Nu sätts currentUser\");\r\n            \t// Save user in local session.\r\n            \tvm.currentUser.name = response.name;\r\n            \tvm.currentUser.id = response.id;\r\n            \tvm.currentUser.loggedIn = true;\r\n            \tSessionFactory.setKey('userId', response.id);\r\n            \tSessionFactory.setKey('userName', response.name);\r\n            } else {\r\n            \t// User not logged in.\r\n            \tvm.setLogout();\r\n            }\r\n            // Update view\r\n            updateUserMenu();\r\n        }, function(error) {\r\n        \tconsole.log(error);\r\n        });\r\n\t}\r\n\r\n\tfunction updateUserMenu()\r\n\t{\r\n\t\t$rootScope.$broadcast('loginChange', {});\r\n\t}\r\n\r\n\treturn vm;\r\n\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('ApplyCampaignCtrl', function($scope,  $location, identifyCampaign, CharacterFactory ) {\r\n\r\n\t$scope.form;\r\n    $scope.campaign = { id : 0, name : \"\"};\r\n    $scope.portrait = {id:6, url:\"http://localhost:8000/assets/img/portraits/default.png\"};\r\n\r\n\t$scope.campaignApplication_init = function() {\r\n\t\t$scope.campaign.id = identifyCampaign.id;\r\n        $scope.campaign.name = identifyCampaign.name;\r\n    }\r\n\r\n    $scope.save = function() {\r\n        $scope.apply.portrait_id = $scope.portrait.id;\r\n        $scope.apply.campaign_id = $scope.campaign.id;\r\n\r\n        console.log(\"portrait id \" + $scope.apply.portrait_id);\r\n\r\n        //return;\r\n\r\n        CharacterFactory.save($scope.apply, function(data){\r\n            $location.path(\"campaign/\" + $scope.campaign.id);\r\n        }, function(error){\r\n            //console.log(\"error\");\r\n            $location.path(\"error/403\");\r\n        });\r\n    }\r\n\r\n    $scope.cancel = function() {\r\n    \t$location.path(\"campaign/\" + $scope.campaign.id);\r\n    }\r\n});","angular.module('ShApp')\r\n.controller('CampaignsCtrl', function($scope, $routeParams, $sce, $location, CampaignService, $route, NavigationService, campaignsData ) {\r\n\r\n    NavigationService.set([]);\r\n\r\n    $scope.setup = function() {\r\n        $scope.campaigns = campaignsData.campaigns;\r\n        $scope.can_create = Boolean(campaignsData.can_create);\r\n    }\r\n\r\n    $scope.setup();\r\n\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('CampApplicationCtrl', function($scope, $routeParams, $location, CampaignFactory, config, NavigationService, campaignData, CharacterFactory, $mdDialog ) {\r\n\r\n    $scope.data = [];\r\n    $scope.data.players = [];\r\n    $scope.data.applicants = [];\r\n\r\n\r\n\t$scope.setupApplications = function(){\r\n\t\tvar campaignId = $routeParams.campaignId;\r\n        if( campaignId == null) $location.path(\"error/404\");\r\n\r\n        $scope.data.maxNrPlayers = campaignData.max_nr_players;\r\n        $scope.data.name = campaignData.name;\r\n\r\n        $.each(campaignData.characters, function( index, value ){\r\n            if(value.status == config.charStatusApplying) $scope.data.applicants.push(value);\r\n            if(value.status == config.charStatusPlaying) $scope.data.players.push(value);\r\n        });\r\n\r\n        // Update the main navigationmenu.\r\n        NavigationService.set([{\"url\" : \"/#/campaign/\"+campaignData.id, 'title': campaignData.name, 'active' : false}, {\"url\" : '', 'title': 'Ansökningar', 'active' : true }]);\r\n\t}\r\n\r\n\t$scope.approveApplicant = function(applyer)\r\n    {\r\n       changeStatus(applyer, config.charStatusPlaying);\r\n    };\r\n\r\n    $scope.removePlayer = function(player)\r\n    {\r\n        changeStatus(player, config.charStatusApplying);\r\n    }\r\n\r\n    $scope.removeApplicant = function(event, player)\r\n    {\r\n        var confirm = $mdDialog.confirm()\r\n          .title('Vill du verkligen ta bort ' + player.name + \"?\")\r\n          .textContent('Karaktären kommer att bli arkiverad.')\r\n          .ariaLabel('Sagohamnen.se')\r\n          .targetEvent(event)\r\n          .ok('Ja')\r\n          .cancel('Nej');\r\n\r\n        // Confirm delete.\r\n        $mdDialog.show(confirm).then(function() {\r\n            changeStatus(player, config.charStatusArchived);\r\n        }, function() {\r\n        });\r\n    }\r\n\r\n    function changeStatus(character, newStatus)\r\n    {\r\n        // Call backend API\r\n        CharacterFactory.changeStatus({id : character.id,  status: newStatus }, function(response) {\r\n            // On success.\r\n            var fromArray, toArray;\r\n\r\n            if (newStatus == config.charStatusApplying) {\r\n                fromArray   =  $scope.data.players;\r\n                toArray     = $scope.data.applicants;\r\n            } else if (newStatus == config.charStatusPlaying) {\r\n                fromArray    =  $scope.data.applicants;\r\n                toArray      = $scope.data.players;\r\n            } else if (newStatus == config.charStatusArchived) {\r\n\r\n                // Remove from applicants array.\r\n                var index = $scope.data.applicants.indexOf(character);\r\n                if (index > -1) {\r\n                    $scope.data.applicants.splice(index, 1);\r\n                }\r\n                return;\r\n            }\r\n\r\n            moveCharacter(character, fromArray, toArray);\r\n        }, function(response){\r\n            console.log(\"Failure\");\r\n        });\r\n    }\r\n\r\n    function moveCharacter(character, fromArray, toArray){\r\n    \t// Move it from applyer list to player list.\r\n        for (var i = 0; i < fromArray.length; i++) {\r\n            // Find the applyer in list.\r\n            if (fromArray[i].id == character.id) {\r\n            \t// Remove it from array.\r\n            \tfromArray.splice(i, 1);\r\n            \ttoArray.push(character);\r\n            \ti--;\r\n            }\r\n        }\r\n    }\r\n\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('EditCampaignCtrl', function($scope, $location, config, NavigationService, editCampaignData, CampaignFactory, $mdDialog ) {\r\n\r\n\t$scope.form;\r\n\t$scope.headerName = \"\";\r\n\r\n\t$scope.setup = function(){\r\n\t\t//console.log(editCampaignData);\r\n\t\t$scope.form = editCampaignData;\r\n\r\n\t\t// Set the header name.\r\n\t\t$scope.headerName = editCampaignData.name;\r\n\r\n\t\t// Update the navigation.\r\n        NavigationService.set([\r\n        \t{\"url\" : \"/#/campaign/\"+editCampaignData.id, 'title': editCampaignData.name, 'active' : false},\r\n        \t{\"url\" : \"\", 'title': \"Redigera\", 'active' : true}]);\r\n\t}\r\n\r\n\t$scope.editCampaign_save = function() {\r\n        var changedData = $scope.form;\r\n\r\n        CampaignFactory.update({id: $scope.form.id}, changedData, function(response){\r\n        \t//console.log(response);\r\n        \t$location.path(\"campaign/\" + changedData.id);\r\n        }, function(response){\r\n        \t$location.path(\"error/500\");\r\n        });\r\n    }\r\n\r\n    $scope.editCampaign_cancel = function() {\r\n        $location.path(\"campaign/\" + $scope.form.id);\r\n    }\r\n\r\n    $scope.removeCampaign = function() {\r\n\r\n        var confirm = $mdDialog.confirm()\r\n          .title('Vill du verkligen ta bort ' + $scope.form.name + \"?\")\r\n          .textContent('Kampanjen kommer att bli arkiverad.')\r\n          .ariaLabel('Sagohamnen.se')\r\n          .targetEvent(event)\r\n          .ok('Ja')\r\n          .cancel('Nej');\r\n        // Confirm delete.\r\n        $mdDialog.show(confirm).then(function() {\r\n            CampaignFactory.remove({campaign_id : $scope.form.id }, function(success) {\r\n                $location.path(\"campaign/\" + $scope.form.id);\r\n            }, function(error) {\r\n                $location.path(\"error/500\");\r\n            });\r\n\r\n        }, function() {\r\n             console.log(\"Nope\");\r\n        });\r\n    }\r\n\r\n\t$scope.setup();\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('newCampaignCtrl', function($scope, $location, $window, NavigationService, CampaignFactory ) {\r\n\r\n\t$scope.setup = function(){\r\n\t\t//$scope.form.max_nr_players = 4;\r\n\t}\r\n\r\n\t$scope.cancel = function(){\r\n\t\t$window.history.back();\r\n\r\n\t}\r\n\r\n\t$scope.submit_new_campaign = function(){\r\n\t\tconsole.log(\"Spara\", $scope.form.name);\r\n\t\tvar campaign = new CampaignFactory;\r\n\t\tcampaign.name \t\t\t\t=  $scope.form.name;\r\n\t\tcampaign.genre \t\t\t\t=  $scope.form.genre;\r\n\t\tcampaign.description \t\t=  $scope.form.description;\r\n\t\tcampaign.max_nr_players \t=  $scope.form.max_nr_players;\r\n\t\tcampaign.$save();\r\n\r\n\t\t$location.path(\"home\");\r\n\t}\r\n\r\n\t$scope.setup();\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('SingleCampaignCtrl', function($scope, $http, DbService, $routeParams, $sce, $location, $route, $timeout, CampaignFactory, CampaignService, config, NavigationService, campaignData) {\r\n\r\n    $scope.showAlternatives = false;\r\n\r\n\t$scope.setupCampaign = function() {\r\n        //console.log(\"Innen i single camp ctrl\");\r\n        var campaignId = $routeParams.campaignId;\r\n        if( campaignId == null) $location.path(\"error/404\");\r\n\r\n        response = campaignData;\r\n        var characters = response.player_characters;\r\n        response.created_at = new Date( response.created_at );\r\n        response.updated_at = new Date( response.updated_at );\r\n\r\n        response.archived = response.status == config.campaginArchived;\r\n\r\n        // Update the navigation.\r\n        NavigationService.set([{\"url\" : \"/#/campaign/\"+campaignData.id, 'title': campaignData.name, 'active' : true}]);\r\n\r\n        $scope.form = response;\r\n    }\r\n\r\n    $scope.applyToCampaign = function() {\r\n        var userId = $scope.myId;\r\n        var campaignId = $scope.form.id;\r\n        $location.path(\"campaign_apply/\" + campaignId);\r\n    }\r\n\r\n    $scope.approveCharacterApply = function(applyer)\r\n    {\r\n        moveApplyerToPlayer(applyer);\r\n    }\r\n\r\n    function moveApplyerToPlayer(applyer){\r\n    \t// Move it from applyer list to player list.\r\n        for (var i = 0; i < $scope.form.appliers.length; i++) {\r\n            // Find the applyer in list.\r\n            if ($scope.form.appliers[i].id == applyer.id) {\r\n            \t// Remove it from array.\r\n            \t$scope.form.appliers.splice(i, 1);\r\n            \t$scope.form.players.push(applyer);\r\n            \ti--;\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.showAlt = function(){\r\n        $scope.showAlternatives = $scope.showAlternatives == true? false : true;\r\n    }\r\n\r\n    $scope.edit = function(){\r\n        $location.path('edit_campaign/'+ $scope.form.id );\r\n    }\r\n    $scope.handleApplicants = function(){\r\n        $location.path('campaign_applications/' + $scope.form.id);\r\n    }\r\n\r\n    $scope.activateCampaign = function(){\r\n        CampaignFactory.activate({ id : $scope.form.id}, function(success){\r\n            console.log(\"Ej arkiverad\");\r\n            $scope.form.archived = false;\r\n        }, function (error) {\r\n\r\n        });\r\n    }\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('EditCharacterCtrl', function($scope, $location, $routeParams, config, $mdDialog, setupData, CharacterService) {\r\n\r\n\t$scope.form = {};\r\n\t$scope.portrait = {id : 0, url: \"\"};\r\n\r\n\t//var status = { 0=>'Arkiverad', 1=>'Ansöker', 2=>'Spelare', 3=>'SLP'};\r\n\r\n\t$scope.setup = function () {\r\n\t\t$scope.campaignId = setupData.id;\r\n\t\tsetupData.created_at = new Date( setupData.created_at );\r\n\t\tsetupData.updated_at = new Date( setupData.updated_at );\r\n\r\n\t\t$scope.portrait.id \t= setupData.portrait.id;\r\n\t\t$scope.portrait.url \t= setupData.portrait.medium;\r\n\r\n\t\t$scope.headline = angular.copy(setupData.name);\r\n\t\t$scope.form = setupData;\r\n\t}\r\n\r\n\t$scope.saveEdit = function(){\r\n\t\t//console.log(\"Dags att spara\");\r\n\r\n\t\tvar postData = {};\r\n\t\tpostData.id \t\t\t\t= $scope.form.id;\r\n\t\tpostData.name \t\t\t\t= $scope.form.name;\r\n\t\tpostData.description \t\t= $scope.form.description;\r\n\t\tpostData.secret_data \t\t= $scope.form.secret_data;\r\n\t\tpostData.portrait_id \t\t= $scope.portrait.id;\r\n\t\tpostData.excerpt \t\t\t= $scope.form.excerpt;\r\n\t\t//postData.campaign_id\t\t= $scope.form.campaign.id;\r\n\r\n\t\tvar result = CharacterService.update($scope.form.id, postData);\r\n\t\tresult.then(function(response){\r\n\t\t\t$location.path(\"character/\"+postData.id);\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t$scope.cancelEdit = function()\r\n\t{\r\n\t\t$location.path(\"character/\" + $scope.form.id);\r\n\t}\r\n\r\n\t$scope.remove = function()\r\n\t{\r\n\t\tvar confirm = $mdDialog.confirm()\r\n          .title('Vill du verkligen ta bort ' + $scope.form.name + \"?\")\r\n          .textContent('Karaktären kommer att bli arkiverad.')\r\n          .ariaLabel('Sagohamnen.se')\r\n          .targetEvent(event)\r\n          .ok('Ja')\r\n          .cancel('Nej');\r\n\r\n        // Confirm delete.\r\n        $mdDialog.show(confirm).then(function() {\r\n        \t// Ask server to change status.\r\n        \tvar characterID = $scope.form.id;\r\n        \tvar newStatus = config.charStatusArchived;\r\n\r\n        \tCharacterService.changeStatus(characterID, newStatus).then(function(response){\r\n        \t\t$location.path( \"character/\" + characterID );\r\n        \t});\r\n        \t/*CharacterFactory.changeStatus({id: $scope.form.id, status: config.charStatusArchived} , function(response) {\r\n        \t\t$location.path(\"character/\"+$scope.form.id);\r\n\t\t\t});*/\r\n        }, function() {\r\n             console.log(\"Nope\");\r\n        });\r\n\r\n\t}\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('SingleCharacterCtrl', function($scope, singleCharacter, config, NavigationService, CharacterService ) {\r\n\r\n\t$scope.form = {};\r\n\t$scope.showConfirmArchive = false;\r\n\t$scope.charAction = {'title' : \"\", 'status' : 0, 'icon' : \"\"};\r\n\t$scope.relationText = \"\";\r\n\t$scope.archived = false;\r\n\t$scope.showAlternatives = false;\r\n\r\n\t$scope.setup = function() {\r\n\t\tsingleCharacter.created_at = new Date( singleCharacter.created_at );\r\n\t\tsingleCharacter.updated_at = new Date( singleCharacter.updated_at );\r\n\t\t$scope.form = singleCharacter;\r\n\r\n\t\t// Character status as text.\r\n\t\tsetStatusText(singleCharacter.status);\r\n\r\n\t\t// Update the navigation.\r\n        NavigationService.set([\r\n        \t{\"url\" : \"/#/campaign/\"+singleCharacter.campaign.id, 'title': singleCharacter.campaign.name, 'active' : false},\r\n        \t{\"url\" : \"/#/character/\"+singleCharacter.id, 'title': singleCharacter.name, 'active' : true}]);\r\n\t}\r\n\r\n\tfunction setStatusText(charStatus)\r\n\t{\r\n\t\t$scope.archived = false;\r\n\t\tif (charStatus == config.charStatusArchived) {\r\n\t\t\t$scope.relationText = \"Arkiverad\";\r\n\t\t\t$scope.archived = true;\r\n\t\t}\r\n\t\telse if (charStatus == config.charStatusApplying) $scope.relationText = \"Ansöker att delta\";\r\n\t\telse if (charStatus == config.charStatusPlaying) $scope.relationText = \"Spelare\";\r\n\t\telse if (charStatus == config.charStatusNpc) $scope.relationText = \"Spelledarekaraktär\";\r\n\t}\r\n\r\n\tvar changeCharStatus = function(newStatus){\r\n\r\n\t\tvar characterID = $scope.form.id;\r\n\r\n    \tCharacterService.changeStatus(characterID, newStatus).then(function(response){\r\n    \t\tsetStatusText(newStatus);\r\n    \t});\r\n\t}\r\n\r\n\t$scope.showAlt = function() {\r\n\t\t$scope.showAlternatives = $scope.showAlternatives == true ? false : true;\r\n\t}\r\n\r\n\t$scope.setApplier = function() {\r\n\t\tchangeCharStatus(config.charStatusApplying);\r\n\t}\r\n\r\n\t$scope.setNpc = function() {\r\n\t\tchangeCharStatus(config.charStatusNpc);\r\n\t}\r\n\r\n\t$scope.setup();\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('ChronicleController', function($scope, $routeParams, $location, ChronicleService, entriesPerPage ) {\r\n\r\n\t$scope.init = function() {\r\n\t\t$scope.chronicles();\r\n\t\tconsole.log(entriesPerPage);\r\n\t}\r\n\r\n\t$scope.chronicles = function() {\r\n\t\tvar campaignId \t= $routeParams.campaignId;\r\n\t\tvar pageNr \t\t= $routeParams.pageNr;\r\n\t\t/*console.log($routeParams);\r\n\t\tconsole.log(campaignId, pageNr);*/\r\n\t\tChronicleService.chroniclesPerPage(campaignId,pageNr).then(function successCallback(response) {\r\n\t\t\tconsole.log(response);\r\n\t\t\t$scope.chronicles = response.chronicles;\r\n\t\t\t$scope.campaign = response.campaign;\r\n\t\t}, function errorCallback(response) {\r\n\r\n\t\t});\r\n\t}\r\n});","angular.module('ShApp')\r\n.controller('SingleRpgCtrl', function($scope, setupData, NavigationService, RpgService, ChatService, ChronicleService ) {\r\n\r\n    $scope.chats = [];\r\n    $scope.dices = [];\r\n    $scope.chronicles = [];\r\n    $scope.chronicleError = \"\";\r\n    $scope.activeUsers;\r\n    $scope.myCharacters = [];\r\n    $scope.input = {chat:\"\", chronicle:\"\"};\r\n    $scope.campaginData;\r\n    $scope.error = {\r\n        chronicle : \"\",\r\n        chat : \"\",\r\n        dice : \"\"\r\n    }\r\n\r\n    // I think I need it for the pick character to say.\r\n    $scope.characterItem = {};\r\n    $scope.diceTypeOptions = [\r\n        {name : '1T4', value : 4},\r\n        {name : '1T6', value : 6},\r\n        {name : '1T8', value : 8},\r\n        {name : '1T10', value : 10},\r\n        {name : '1T12', value : 12},\r\n        {name : '1T20', value : 20},\r\n        {name : '1T100', value : 100} ]\r\n\r\n\t$scope.init = function(){\r\n        var campaign = setupData.campaign;\r\n        $scope.campaginData = campaign;\r\n\r\n\t\t// Update the navigation.\r\n        NavigationService.addToMenu(\"/#/campaign/\" + campaign.id, campaign.name, false);\r\n        NavigationService.addToMenu(\"/#\", 'Rollspel', true);\r\n\r\n        // Initiate the RPG service.\r\n        RpgService.init(setupData);\r\n\r\n        // Find active users.\r\n        $scope.activUsers = setupData.users;\r\n\r\n        // Wait some seconds for userService to find user in server,\r\n        // if user refresh rpg room.\r\n        setTimeout(function(){\r\n\r\n        },100);\r\n\r\n        // Fetch those characters that are mine.\r\n            $scope.myCharacters = RpgService.my_characters();\r\n            console.log(\"Mina karaktärer\", $scope.myCharacters);\r\n\r\n            // Set selected character.\r\n            if ($scope.myCharacters.length > 0)\r\n            {\r\n                $scope.characterItem.selectedItem = $scope.myCharacters[0];\r\n            }\r\n\r\n            setSelectedOptions();\r\n\r\n\r\n\r\n\t}\r\n\r\n\r\n    function setSelectedOptions(){\r\n        $scope.input.selectDiceType = {name: \"1T6\", value: 6 };\r\n    }\r\n\r\n    $scope.saveChronicleEntry = function()\r\n    {\r\n        var campaignId      = setupData.campaign.id;\r\n        var text            = $scope.input.chronicle.text;\r\n        var characterId     = $scope.characterItem.selectedItem.id;\r\n\r\n        // If no character picked\r\n        if (characterId == 0) characterId = null;\r\n\r\n        // Store it in DB.\r\n        var result = ChronicleService.storeEntry(campaignId, text, characterId);\r\n        result.then(function(response){\r\n            // Spamming?\r\n            if (response.spamming){\r\n                $scope.chronicleError = RpgService.messages.spamingChronicle;\r\n                return;\r\n            }\r\n            // If important info returned.\r\n            if (response.info != null ){\r\n                // Add portrait and more..\r\n                var entry = RpgService.format_chronicle(campaignId, text, characterId, response.info);\r\n                if(!!entry){\r\n                    // Display it.\r\n                    $scope.chronicles.push(entry);\r\n                }\r\n            }\r\n\r\n            $scope.chronicleError = \"\";\r\n            $scope.input.chronicle.text = \"\";\r\n\r\n        });\r\n    }\r\n\r\n    $scope.storeChat = function(){\r\n        var message     = $scope.input.chat;\r\n        var campaignId  = setupData.campaign.id;\r\n\r\n        $scope.error.chat = \"\";\r\n        $scope.error.chat = ChatService.chatValid(message);\r\n        if($scope.error.chat != \"\")\r\n            return;\r\n\r\n        $result = ChatService.storeChat(message,campaignId);\r\n        $result.then(function(response){\r\n            var chat = RpgService.interpret_stored_chat_response(response);\r\n            if( !!chat ) {\r\n                $scope.chats.push(chat);\r\n                $scope.input.chat = \"\";\r\n            }\r\n        }, function(error){\r\n            if (error.status == 429){\r\n                $scope.error.chat = \"Var god vänta med att skriva ett chatinlägg tills en annan spelare gjort ett.\";\r\n            }\r\n        });\r\n    }\r\n\r\n    $scope.saveDiceThrow = function(){\r\n        var campaignId = setupData.campaign.id;\r\n        var nrOfDices   = $scope.input.dice.nr;\r\n        var diceType    = $scope.input.selectDiceType.value;\r\n        var diceMod     = $scope.input.dice.mod;\r\n        var diceDescription  = $scope.input.dice.description;\r\n        var ob = $scope.input.dice.ob;\r\n\r\n        // Validate dices.\r\n        $scope.error.dice = \"\";\r\n        $scope.error.dice = ChatService.diceThrowValid(nrOfDices, diceType, diceMod, ob, diceDescription);\r\n        if ($scope.error.dice != \"\"){\r\n            return;\r\n        }\r\n\r\n        // Store it.\r\n        ChatService.storeDiceThrow(campaignId, nrOfDices, diceType, diceMod, ob, diceDescription).then(function(response){\r\n            // Interpret and add username.\r\n            var dice = RpgService.interpret_stored_chat_response(response);\r\n            if( !!dice ) {\r\n                // Add to both chats and dice array.\r\n                $scope.dices.push(dice);\r\n                $scope.chats.push(dice);\r\n                // Reset description input.\r\n                $scope.input.dice.description = \"\";\r\n            }\r\n        }, function(error){\r\n            console.log(\"Här blev det ett fel\");\r\n            if (error.status == 429){\r\n                $scope.error.dice = \"Var god vänta med att slå en tärning tills en annan spelare slagit ett.\";\r\n            }\r\n        });\r\n    }\r\n\r\n    // Event watcher. Calls when chat should be updated.\r\n    $scope.$on('rpgUpdate', function(event, response){\r\n        // If new dices\r\n        if (response.newDices.length > 0) {\r\n            response.newDices.forEach(function(row){\r\n                if ( ! RpgService.doEntryExist($scope.dices, row) )\r\n                    $scope.dices.push(row);\r\n            });\r\n        }\r\n        // If new chats\r\n        if (response.newChats.length > 0) {\r\n            response.newChats.forEach(function(row){\r\n                // Dont add entry if already displayed.\r\n                if ( ! RpgService.doEntryExist($scope.chats, row) )\r\n                    $scope.chats.push(row);\r\n            });\r\n        }\r\n\r\n        // If new chronicles.\r\n        if (response.newChronicles.length > 0 ) {\r\n            response.newChronicles.forEach(function(row){\r\n                if ( ! RpgService.doEntryExist($scope.chronicles, row) ) {\r\n                    $scope.chronicles.push(row);\r\n                }\r\n            });\r\n        }\r\n\r\n        // If online users changed.\r\n        if (response.onlineUsersChanged ){\r\n            //console.log(\"Ändring i users online\");\r\n            $scope.activeUsers = response.activeUsers;\r\n        }\r\n    });\r\n\r\n    // When user leaves chat.\r\n    $scope.$on(\"$destroy\", function(){\r\n        console.log(\"Lämnar rpg.\");\r\n        RpgService.stopPulling();\r\n    });\r\n\r\n});\r\n\r\n","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('EditUserCtrl', function($scope, $location, $routeParams, config, NavigationService, setupEditUserData, UserFactory ) {\r\n\r\n\t$scope.form;\r\n\t$scope.title;\r\n\r\n\t$scope.setup = function() {\r\n\t\t$scope.form = setupEditUserData;\r\n\t\t$scope.title = setupEditUserData.name;\r\n\t}\r\n\r\n\t$scope.editUser_save = function() {\r\n        UserFactory.updateA({id: $scope.form.id}, $scope.form, function(response){\r\n        \t$location.path(\"user/\" + $scope.form.id);\r\n        }, function(response) {\r\n        \t$location.path(\"error/401\");\r\n        });\r\n\t}\r\n\r\n\t$scope.cancelBt = function(){\r\n\t\t$location.path(\"user/\" + $scope.form.id);\r\n\t}\r\n\r\n\t$scope.setup();\r\n\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('SingleUserCtrl', function($scope, $routeParams, $location, userData, config, NavigationService, UserService ) {\r\n\r\n\t$scope.player_characters = [];\r\n\t$scope.applying_characters = [];\r\n\t$scope.showAlternatives = false;\r\n\r\n\t$scope.setup = function()\r\n\t{\r\n\t\t$scope.form = userData;\r\n    \t$scope.form.updated_at = new Date( userData.updated_at );\r\n\r\n    \t// Sort characters\r\n    \tsortCharacters(userData.user_characters);\r\n\r\n    \t// Update navigation\r\n    \tNavigationService.set([{\"url\" : \"/#/user/\"+userData.id, 'title': userData.name, 'active' : true}]);\r\n\t}\r\n\r\n\tfunction sortCharacters(characters) {\r\n\t\t$.each( characters, function( index, value ){\r\n            if(value.status == config.charStatusApplying) $scope.applying_characters.push(value);\r\n            if(value.status == config.charStatusPlaying) $scope.player_characters.push(value);\r\n        });\r\n\t}\r\n\r\n\t$scope.showAlt = function() {\r\n\t\t$scope.showAlternatives = $scope.showAlternatives == true ? false : true;\r\n\t}\r\n\r\n\t$scope.logOut = function() {\r\n\t\tUserService.logout();\r\n\t}\r\n\r\n\t$scope.setup();\r\n\r\n});","angular.module('ShApp')\r\n// Got from:\r\n// http://stackoverflow.com/questions/15847726/is-there-a-simple-way-to-use-button-to-navigate-page-as-a-link-does-in-angularjs\r\n.directive( 'goClick', function ( $location ) {\r\n  return function ( scope, element, attrs ) {\r\n    var path;\r\n\r\n    attrs.$observe( 'goClick', function (val) {\r\n      path = val;\r\n    });\r\n\r\n    element.bind( 'click', function () {\r\n      scope.$apply( function () {\r\n        $location.path( path );\r\n      });\r\n    });\r\n  };\r\n});","angular.module('ShApp')\r\n\r\n// inject the Comment service into our controller\r\n.controller('headerMenuCtrl', function($scope, $rootScope, UserService, $location) {\r\n\t$scope.menuUser = { name: \"\", id: 0, loggedIn: false };\r\n\r\n\t$scope.$on('loginChange', function(event, response){\r\n\t\t// UserService.currentUser.id\r\n\t\t$scope.menuUser.id = UserService.currentUser.id;\r\n\t\t$scope.menuUser.name = UserService.currentUser.name;\r\n\t\t$scope.menuUser.loggedIn = UserService.currentUser.loggedIn;\r\n\t\t//$scope.$digest();\r\n\t});\r\n\r\n\t$scope.logout = function() {\r\n\t\tUserService.logout();\r\n\t}\r\n\r\n});","angular.module('ShApp')\r\n\r\n.directive('headerMenu', function() {\r\n    return {\r\n    \trestrict: 'E',\r\n    \tcontroller : 'headerMenuCtrl',\r\n\t    scope: {},\r\n\t    templateUrl: 'views/directives/header_menu.html'\r\n    };\r\n});","angular.module('ShApp')\r\n.controller('PickPortraitCtrl', function($scope, PortraitService,filterFilter ) {\r\n\r\n    $scope.list = [];\r\n    $scope.portraits = [];\r\n    $scope.selectedPortrait = {id:0, url:\"\"};\r\n\r\n    $scope.currentPage = 1;\r\n    $scope.maxSize = 100;\r\n    $scope.bigCurrentPage = 1;\r\n    $scope.pageSize = 6;\r\n\r\n    $scope.init = function () {\r\n        fetchPortraits();\r\n    };\r\n\r\n    var fetchPortraits = function(){\r\n\r\n        // If no portraits JSON loaded\r\n        if(PortraitService.all_portraits.length == 0){\r\n            console.log(\"Hämta!\");\r\n            // Fetch JSOn from service.\r\n            PortraitService.fetchPortraits().then(function(){\r\n                $scope.portraits = PortraitService.all_portraits;\r\n                PortraitService.setPortraits = $scope.portraits;\r\n                console.log($scope.portraits);\r\n                setDefaultPreview()\r\n            });\r\n        } else {\r\n            console.log(\"Finns redan!\");\r\n            // Add JSON to scope.\r\n            $scope.portraits = PortraitService.all_portraits;\r\n            setDefaultPreview();\r\n        }\r\n    }\r\n\r\n    var setDefaultPreview = function(){\r\n        $scope.selectedPortrait.id = $scope.portraits[0].id;\r\n        $scope.selectedPortrait.url = $scope.portraits[0].medium;\r\n    }\r\n\r\n    // This comparison function is used to show\r\n    // all portraits, even if search is empty.\r\n    // http://stackoverflow.com/questions/21199759/angularjs-filter-comparator-true-while-displaying-ng-repeat-list-when-input-fiel\r\n    $scope.exceptEmptyComparator = function (actual, expected) {\r\n        if (!expected) {\r\n           return true;\r\n        }\r\n        return angular.equals(expected, actual);\r\n    }\r\n\r\n    $scope.selectPortrait = function(portrait)\r\n    {\r\n        // If parent scope have currentPortrait attribute.\r\n        if ( !angular.isUndefined($scope.currentPortrait) ) {\r\n            $scope.currentPortrait.id = portrait.id;\r\n            $scope.currentPortrait.url = portrait.medium;\r\n        }\r\n    }\r\n\r\n    $scope.selectImg = function(thePortrait)\r\n    {\r\n        $scope.selectedPortrait.id = thePortrait.id;\r\n        $scope.selectedPortrait.url = thePortrait.medium;\r\n    }\r\n\r\n    $scope.pickImg = function()\r\n    {\r\n        $scope.portrait.id  = $scope.selectedPortrait.id;\r\n        $scope.portrait.url = $scope.selectedPortrait.url;\r\n    }\r\n\r\n\r\n});","angular.module('ShApp')\r\n.directive('pickPortraitDir', function(PortraitService) {\r\n    return {\r\n    \trestrict: 'E',\r\n    \tscope: {\r\n\t      portrait: '=portrait'\r\n\t      /* '@' means One Way Binding (Parent changes affect child, child changes does not affect parent)\r\n\t        The '=' means Two Ways Binding.*/\r\n\t    },\r\n    \ttemplateUrl : \"views/media/pick_portrait.html\",\r\n        controller: 'PickPortraitCtrl'\r\n\r\n    };\r\n});\r\n","angular.module('ShApp')\r\n\r\n.directive('rpgInputChatDir', function() {\r\n    var result = {};\r\n    result.restrict =  'E';\r\n    result.templateUrl = \"views/directives/rpg_inputs/rpg_input_chat.html\";\r\n\r\n    return result;\r\n});","angular.module('ShApp')\r\n\r\n.directive('rpgInputChronicleDir', function() {\r\n    var result = {};\r\n    result.restrict =  'E';\r\n    result.templateUrl = \"views/directives/rpg_inputs/rpg_input_chronicle.html\";\r\n\r\n    return result;\r\n});","angular.module('ShApp')\r\n\r\n.directive('rpgInputDicesDir', function() {\r\n    var result = {};\r\n    result.restrict =  'E';\r\n    result.templateUrl = \"views/directives/rpg_inputs/input_dices.html\";\r\n\r\n    return result;\r\n});"],"sourceRoot":"/source/"}